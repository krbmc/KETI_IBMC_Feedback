
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__feedback_interface_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__feedback_interface_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace keti {
namespace DBus {

class Feedback_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Feedback_adaptor()
    : ::DBus::InterfaceAdaptor("org.keti.DBus.Feedback")
    {
        register_method(Feedback_adaptor, Level1, _Level1_stub);
        register_method(Feedback_adaptor, Level2, _Level2_stub);
        register_method(Feedback_adaptor, Level3, _Level3_stub);
        register_method(Feedback_adaptor, Level4, _Level4_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Level1_args[] = 
        {
            { "errMsg", "s", true },
            { "warningReport", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Level2_args[] = 
        {
            { "errMsg", "s", true },
            { "faultPredictionReport", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Level3_args[] = 
        {
            { "errMsg", "s", true },
            { "criticalReport", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Level4_args[] = 
        {
            { "errMsg", "s", true },
            { "selfRepairLog", "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Feedback_adaptor_methods[] = 
        {
            { "Level1", Level1_args },
            { "Level2", Level2_args },
            { "Level3", Level3_args },
            { "Level4", Level4_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Feedback_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Feedback_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Feedback_adaptor_interface = 
        {
            "org.keti.DBus.Feedback",
            Feedback_adaptor_methods,
            Feedback_adaptor_signals,
            Feedback_adaptor_properties
        };
        return &Feedback_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string Level1(const std::string& errMsg) = 0;
    virtual std::string Level2(const std::string& errMsg) = 0;
    virtual std::string Level3(const std::string& errMsg) = 0;
    virtual std::string Level4(const std::string& errMsg) = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Level1_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Level1(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Level2_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Level2(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Level3_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Level3(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Level4_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Level4(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif //__dbusxx__feedback_interface_adaptor_h__ADAPTOR_MARSHAL_H
